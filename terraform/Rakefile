# frozen_string_literal: true

require 'rubocop/rake_task'

RuboCop::RakeTask.new do |rubocop|
  rubocop.options = %w[-D --enable-pending-cops]
  rubocop.requires << 'rubocop-rake'
end

desc 'Run all style checks and unit tests'
task default: ['rubocop', 'nomad:fmt-check-all',
               'nomad:validate-all', 'vault:fmt-all',
               'consul:fmt-all', 'terraform:test']

TF_ACTIONS = %w[validate plan fmt refresh show output].freeze
EXTRA_ACTIONS = [
  { name: 'fmt-check', command: 'terraform fmt -check' },
  { name: 'apply', command: 'terraform apply -auto-approve=true -parallelism=1' },
  { name: 'lint', command: 'tflint ' },
  { name: 'destroy', command: 'terraform destroy -auto-approve' },
  { name: 'document', command: 'terraform-docs markdown . | tee README.md' },
  { name: 'target', command: 'terraform destroy -auto-approve -target nomad_job.everything' },
  { name: 'init', command: 'terraform init -upgrade=true' }
].freeze

desc 'Run Terraform test then apply'
task deploy: ['nomad:validate-all', 'terraform:fmt-check',
              'terraform:validate', 'terraform:apply']

namespace :terraform do
  desc 'Run Terraform tests'
  task test: ['terraform:fmt-check', 'terraform:validate',
              'terraform:plan']

  TF_ACTIONS.each do |action|
    desc "Run Terraform #{action}"
    task action do
      puts "Running #{action}"
      require 'mixlib/shellout'
      cmd = Mixlib::ShellOut.new("terraform #{action}")
      cmd.live_stdout = $stdout
      cmd.live_stderr = $stderr
      cmd.run_command
      cmd.error!
    end
  end

  EXTRA_ACTIONS.each do |extra|
    desc "Run Terraform #{extra[:name]}"
    task extra[:name] do
      puts "Running #{extra[:name]}"
      require 'mixlib/shellout'
      cmd = Mixlib::ShellOut.new(extra[:command])
      cmd.live_stdout = $stdout
      cmd.live_stderr = $stderr
      cmd.run_command
      cmd.error!
    end
  end
end

NOMAD_BUILDS = Dir.glob('jobs/*.nomad').map { |name| name[5..-7] }
namespace :nomad do
  NOMAD_BUILDS.each do |target|
    desc "Run Nomad validate-#{target}"
    task "validate-#{target}" do
      puts "Running Nomad validate on #{target}"
      require 'mixlib/shellout'
      cmd = Mixlib::ShellOut.new(
        "nomad job validate jobs/#{target}.nomad"
      )
      cmd.live_stdout = $stdout
      cmd.live_stderr = $stderr
      cmd.run_command
      cmd.error!
    end

    desc "Run Nomad validate-#{target}"
    task "fmt-check-#{target}" do
      puts "Running Hcledit fmt on #{target}"
      require 'mixlib/shellout'
      cmd = Mixlib::ShellOut.new(
        "hcledit fmt < jobs/#{target}.nomad | diff jobs/#{target}.nomad -"
      )
      cmd.live_stdout = $stdout
      cmd.live_stderr = $stderr
      cmd.run_command
      cmd.error!
    end
  end

  desc 'Run Nomad validate all'
  task 'validate-all': NOMAD_BUILDS.map { |name| "nomad:validate-#{name}" }

  desc 'Run Hcledit fmt all'
  task 'fmt-check-all': NOMAD_BUILDS.map { |name| "nomad:fmt-check-#{name}" }
end

VAULT_BUILDS = Dir.glob('vpol/*.hcl').map { |name| name[5..-5] }
namespace :vault do
  VAULT_BUILDS.each do |target|
    desc "Run Vault format-#{target}"
    task "fmt-#{target}" do
      puts "Running Vault format on #{target}"
      require 'mixlib/shellout'
      cmd = Mixlib::ShellOut.new(
        "vault policy fmt vpol/#{target}.hcl"
      )
      cmd.live_stdout = $stdout
      cmd.live_stderr = $stderr
      cmd.run_command
      cmd.error!
    end
  end

  desc 'Run Vault format all'
  task 'fmt-all': VAULT_BUILDS.map { |name| "vault:fmt-#{name}" }
end

CONSUL_BUILDS = Dir.glob('cpol/*.hcl').map { |name| name[5..-5] }
namespace :consul do
  CONSUL_BUILDS.each do |target|
    desc "Run Consul format-#{target}"
    task "fmt-#{target}" do
      puts "Running Consul format on #{target}"
      require 'mixlib/shellout'
      cmd = Mixlib::ShellOut.new(
        "hcledit fmt < cpol/#{target}.hcl | diff cpol/#{target}.hcl -"
      )
      cmd.live_stdout = $stdout
      cmd.live_stderr = $stderr
      cmd.run_command
      cmd.error!
    end
  end

  desc 'Run Consul format all'
  task 'fmt-all': CONSUL_BUILDS.map { |name| "consul:fmt-#{name}" }
end
