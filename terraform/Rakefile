# frozen_string_literal: true

require 'rubocop/rake_task'

RuboCop::RakeTask.new do |rubocop|
  rubocop.options = %w[-D --enable-pending-cops]
  rubocop.requires << 'rubocop-rake'
end

desc 'Run all style checks and unit tests'
task default: ['rubocop', 'nomad:fmt-check',
               'nomad:validate-all', 'vault:fmt-check',
               'consul:fmt-check', 'terraform:test']

desc 'Run all style checks and unit tests'
task fmt: ['rubocop:autocorrect', 'nomad:fmt-all',
           'vault:fmt-all', 'consul:fmt-all',
           'terraform:fmt']

TF_ACTIONS = %w[validate plan fmt show output].freeze
EXTRA_ACTIONS = [
  { name: 'fmt-check', command: 'terraform fmt -check' },
  { name: 'apply', command: 'terraform apply -auto-approve=true -parallelism=1' },
  { name: 'lint', command: 'tflint ' },
  { name: 'destroy', command: 'terraform destroy -auto-approve' },
  { name: 'refresh', command: 'terraform  apply -refresh-only -auto-approve' },
  { name: 'document',
    command: 'terraform-docs markdown --hide resources --hide data-sources --hide-empty --output-file README.md .' },
  { name: 'target', command: 'terraform destroy -auto-approve -target nomad_job.everything' },
  { name: 'init', command: 'terraform init -upgrade=true' }
].freeze

desc 'Run Terraform test then apply'
task deploy: ['nomad:validate-all', 'terraform:fmt-check',
              'terraform:validate', 'terraform:apply']

desc 'Run Terraform targeted destroy'
task target: ['terraform:target', 'terraform:refresh']

namespace :terraform do
  desc 'Run Terraform tests'
  task test: ['terraform:fmt-check', 'terraform:validate',
              'terraform:plan']

  TF_ACTIONS.each do |action|
    desc "Run Terraform #{action}"
    task action do
      puts "Running #{action}"
      pid = Process.spawn("terraform #{action}")
      Process.wait pid
      raise "Process Exited with Error. action: #{action}" if Process.last_status.exitstatus.positive?
    end
  end

  EXTRA_ACTIONS.each do |extra|
    desc "Run Terraform #{extra[:name]}"
    task extra[:name] do
      puts "Running #{extra[:name]}"
      pid = Process.spawn(extra[:command])
      Process.wait pid
      raise "Process Exited with Error. action: #{extra[:name]}" if Process.last_status.exitstatus.positive?
    end
  end
end

NOMAD_BUILDS = Dir.glob('jobs/*.nomad').map { |name| name[5..-7] }
namespace :nomad do
  NOMAD_BUILDS.each do |target|
    desc "Run Nomad validate-#{target}"
    task "validate-#{target}" do
      puts "Running Nomad validate on #{target}"
      pid = Process.spawn("nomad job validate jobs/#{target}.nomad")
      Process.wait pid
      raise 'Process Exited with Error.' if Process.last_status.exitstatus.positive?
    end

    desc "Run Nomad format-check-#{target}"
    task "fmt-check-#{target}" do
      puts "Running Nomad fmt -check on #{target}"
      pid = Process.spawn("nomad fmt -check jobs/#{target}.nomad")
      Process.wait pid
      raise 'Process Exited with Error.' if Process.last_status.exitstatus.positive?
    end

    desc "Run Nomad format-#{target}"
    task "fmt-#{target}" do
      puts "Running Nomad fmt on #{target}"
      pid = Process.spawn("nomad fmt jobs/#{target}.nomad")
      Process.wait pid
      raise 'Process Exited with Error.' if Process.last_status.exitstatus.positive?
    end
  end

  desc 'Run Nomad validate all'
  task 'validate-all': NOMAD_BUILDS.map { |name| "nomad:validate-#{name}" }

  desc 'Run Hcledit fmt check all'
  task 'fmt-check': NOMAD_BUILDS.map { |name| "nomad:fmt-check-#{name}" }

  desc 'Run Hcledit fmt all'
  task 'fmt-all': NOMAD_BUILDS.map { |name| "nomad:fmt-#{name}" }
end

VAULT_BUILDS = Dir.glob('vpol/*.hcl').map { |name| name[5..-5] }
namespace :vault do
  VAULT_BUILDS.each do |target|
    desc "Run Vault format-check-#{target}"
    task "fmt-check-#{target}" do
      puts "Running Hcledit fmt on #{target}"
      pid = Process.spawn("hcledit fmt -f vpol/#{target}.hcl | diff vpol/#{target}.hcl -")
      Process.wait pid
      raise 'Process Exited with Error.' if Process.last_status.exitstatus.positive?
    end

    desc "Run Vault format-#{target}"
    task "fmt-#{target}" do
      puts "Running Vault format on #{target}"
      pid = Process.spawn("vault policy fmt vpol/#{target}.hcl")
      Process.wait pid
      raise 'Process Exited with Error.' if Process.last_status.exitstatus.positive?
    end
  end

  desc 'Run Vault format check all'
  task 'fmt-check': VAULT_BUILDS.map { |name| "vault:fmt-check-#{name}" }

  desc 'Run Vault format all'
  task 'fmt-all': VAULT_BUILDS.map { |name| "vault:fmt-#{name}" }
end

CONSUL_BUILDS = Dir.glob('cpol/*.hcl').map { |name| name[5..-5] }
namespace :consul do
  CONSUL_BUILDS.each do |target|
    desc "Run consul format-check-#{target}"
    task "fmt-check-#{target}" do
      puts "Running Hcledit fmt on #{target}"
      pid = Process.spawn("hcledit fmt -f cpol/#{target}.hcl | diff cpol/#{target}.hcl -")
      Process.wait pid
      raise 'Process Exited with Error.' if Process.last_status.exitstatus.positive?
    end

    desc "Run Consul format-#{target}"
    task "fmt-#{target}" do
      puts "Running Consul format on #{target}"
      pid = Process.spawn("hcledit fmt -u -f cpol/#{target}.hcl")
      Process.wait pid
      raise 'Process Exited with Error.' if Process.last_status.exitstatus.positive?
    end
  end

  desc 'Run Consul format check all'
  task 'fmt-check': CONSUL_BUILDS.map { |name| "consul:fmt-check-#{name}" }

  desc 'Run Consul format all'
  task 'fmt-all': CONSUL_BUILDS.map { |name| "consul:fmt-#{name}" }
end
